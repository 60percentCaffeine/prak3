2
Стиль кодирования программ
Стиль кодирования — это набор правил оформления программы на некотором язы-
ке. Стили кодирования существуют для всех языков. Для языка Си существует несколько
стилей кодирования. Рекомендуется нижеприведённый стиль, но вы можете использовать
какой-либо другой, кроме изобретённого вами самими.
Стиль кодирования не влияет на работоспособность программ, но влияет на простоту их
прочтения и понимания. Несоблюдение стиля кодирования является поводом для отказа в
приёме задачи про практикуму.
Редактор
emacs
поддерживает
форматирование
файлов
при
редактировании
Си-
программ. Чтобы разместить строку с правильным отступом, нажмите на клавишу «Tab».
Если отступ не совпал с ожидаемым, внимательно посмотрите на программу, возможно она
содержит синтаксическую ошибку.
Существует специальная программа (indent), которая переформатирует программу на Си
в соответствие с указанным стилем кодирования. Для получения более подробной информа-
ции, используйте команду man indent.
Обратите внимание, что все примеры программ в раздаваемых Вам материалах, отфор-
матированы в соответствие с этими правилами.
Отступы в программе следует размещать следующим образом: все директивы препроцес-
сора начинаются с начала строки. Определение функции оформляется следующим образом:
<класс памяти> <возвр. тип> <имя функции>(<аргументы>)
{
}
фигурные скобки размещаются на отдельных строках. Пример:
int main(int argc, char **argv)
{
}
Если весь заголовок функции не умещается на одной строке, продолжение заголовка вырав-
нивается по открывающей скобке. Например,
unsigned short int foo(int a,
double b)
{
}
Инициализаторы сложных объектов должны располагаться на отдельной строке. Напри-
мер

#define MAX_CIRCLES 10
struct circle
{
double x, y, r;
char
name[16];
};
int ncircles = 2;
struct circle circles[MAX_CIRCLES] =
{
{ 1.0, 2.0, 0.4, "null" },
{ 3.0, 3.0, 0.1, "default" },
};
Отступ во вложенных блоках 2, 4, либо 8 символов, но один во всей программе. Фигурные
скобки в операторах размещаются как показано на примере:
if (x > 0) {
} else {
}
if (y > 0) {
}
while (1) {
}
for (;;) {
}
do {
} while (x < 5);
Ключевые слова отделяются от последующих символов хотя бы одним пробелом. Знаки
бинарных операций отделяются от своих аргументов пробелами слева и справа. Открываю-
щие скобки не отделяются пробелами справа, а закрывающие — слева.
Рекомендуется размещать только один оператор на строке.
Размер функции не должен превышать размера одного экрана (24 строки). Если функция
содержит оператор switch, её размер может превышать размер одного экрана. В против-
ном случае, большие функции — почти всегда знак плохой организации программы. Нужно
подумать о том, как разбить большую функцию на несколько функций меньшего размера.
Программа не должна содержать «магических констант» в теле операторов и функций.
Все такие константы должны быть вынесены в отдельные определения констант. Исключе-
нием являются константы -1, 0, 1 и 2, если это номер стандартного потока ошибок.
Рекомендуется писать комментарии, описывающие назначение и параметры каждой
функции (кроме main). Кроме того, рекомендуется писать поясняющий комментарий к каж-
дому нетривиальному фрагменту программы.
Рекомендуется вставлять пустые строки между определениями переменных и началом
кода функции, между функциями, между фрагментами кода, выражающими законченную
мысль.

Запрещается использование макроопределений, нарушающих синтаксис языка. Напри-
мер
#define BEGIN {
#define END
}
Не рекомендуется использование определений функций в старом стиле. Необходимость
такого определения вы должны обосновать. Не рекомендуется использовать определения
функций и переменных с типом по умолчанию.
Запрещается использование функций без прототипов, кроме системных функций. Запре-
щается явное определение прототипов системных функций.
